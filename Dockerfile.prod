# ========================
# Build stage
# ========================
FROM node:20-alpine AS build

# Copier la bonne config selon l'argument
# On copie d'abord toutes les configs dans un dossier temporaire
COPY nginx.dev.conf /tmp/nginx.dev.conf
COPY nginx.prod.conf /tmp/nginx.prod.conf

WORKDIR /app

COPY package*.json ./
RUN npm install --frozen-lockfile

COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine AS production

ARG ENV=dev

COPY --from=build /app/build /usr/share/nginx/html

# Copier configs depuis le build stage
COPY --from=build /tmp/nginx.dev.conf /tmp/nginx.dev.conf
COPY --from=build /tmp/nginx.prod.conf /tmp/nginx.prod.conf
# Utiliser l'argument ENV pour copier la config souhait√©e
RUN if [ "$ENV" = "dev" ]; then \
        cp /tmp/nginx.dev.conf /etc/nginx/conf.d/default.conf ; \
    else \
        cp /tmp/nginx.prod.conf /etc/nginx/conf.d/default.conf ; \
    fi

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
